Requirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (6.0.2)
Requirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (4.66.4)
Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)
Collecting easydict==1.9.0
  Downloading easydict-1.9.tar.gz (6.4 kB)
  Preparing metadata (setup.py) ... done
Building wheels for collected packages: easydict
  Building wheel for easydict (setup.py) ... done
  Created wheel for easydict: filename=easydict-1.9-py3-none-any.whl size=6345 sha256=1b7146f7973acb4d3686cbf53f04bf186c9e4474707c02a4f835ed04e1b7808f
  Stored in directory: /root/.cache/pip/wheels/fd/d2/35/4c11d19a72280492846f4c4df975311a2bac475e8021f86c1d
Successfully built easydict
Installing collected packages: easydict
Successfully installed easydict-1.9
Collecting scikit-image==0.17.2
  Downloading scikit-image-0.17.2.tar.gz (29.8 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 29.8/29.8 MB 46.7 MB/s eta 0:00:0000:0100:01
  Preparing metadata (setup.py) ... done
Requirement already satisfied: numpy>=1.15.1 in /opt/conda/lib/python3.10/site-packages (from scikit-image==0.17.2) (1.26.4)
Requirement already satisfied: scipy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from scikit-image==0.17.2) (1.14.1)
Requirement already satisfied: matplotlib!=3.0.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-image==0.17.2) (3.7.5)
Requirement already satisfied: networkx>=2.0 in /opt/conda/lib/python3.10/site-packages (from scikit-image==0.17.2) (3.3)
Requirement already satisfied: pillow!=7.1.0,!=7.1.1,>=4.3.0 in /opt/conda/lib/python3.10/site-packages (from scikit-image==0.17.2) (10.3.0)
Requirement already satisfied: imageio>=2.3.0 in /opt/conda/lib/python3.10/site-packages (from scikit-image==0.17.2) (2.34.1)
Requirement already satisfied: tifffile>=2019.7.26 in /opt/conda/lib/python3.10/site-packages (from scikit-image==0.17.2) (2024.5.22)
Requirement already satisfied: PyWavelets>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-image==0.17.2) (1.6.0)
Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image==0.17.2) (1.2.1)
Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image==0.17.2) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image==0.17.2) (4.53.0)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image==0.17.2) (1.4.5)
Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image==0.17.2) (21.3)
Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image==0.17.2) (3.1.2)
Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image==0.17.2) (2.9.0.post0)
Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib!=3.0.0,>=2.0.0->scikit-image==0.17.2) (1.16.0)
Building wheels for collected packages: scikit-image
  Building wheel for scikit-image (setup.py) ... done
  Created wheel for scikit-image: filename=scikit_image-0.17.2-cp310-cp310-linux_x86_64.whl size=12863605 sha256=7b6dc3f6a07249a1922a52418d949c4b910824badcd63b340953168d7846c7b3
  Stored in directory: /root/.cache/pip/wheels/30/fc/f4/10c6987c3a9cb937913fa19f8290e91e6f66df2440c2af6130
Successfully built scikit-image
Installing collected packages: scikit-image
  Attempting uninstall: scikit-image
    Found existing installation: scikit-image 0.23.2
    Uninstalling scikit-image-0.23.2:
      Successfully uninstalled scikit-image-0.23.2
ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
albumentations 1.4.17 requires scikit-image>=0.21.0, but you have scikit-image 0.17.2 which is incompatible.
Successfully installed scikit-image-0.17.2
Collecting scikit-learn==0.24.2
  Downloading scikit-learn-0.24.2.tar.gz (7.5 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 7.5/7.5 MB 50.1 MB/s eta 0:00:0000:0100:01
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
  Preparing metadata (pyproject.toml) ... error
  error: subprocess-exited-with-error
  
  × Preparing metadata (pyproject.toml) did not run successfully.
  │ exit code: 1
  ╰─> [1506 lines of output]
      <string>:17: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
      Partial import of sklearn during the build process.
      <string>:116: DeprecationWarning:
      
        `numpy.distutils` is deprecated since NumPy 1.23.0, as a result
        of the deprecation of `distutils` itself. It will be removed for
        Python >= 3.12. For older Python versions it will remain present.
        It is recommended to use `setuptools < 60.0` for those Python versions.
        For more details, see:
          https://numpy.org/devdocs/reference/distutils_status_migration.html
      
      
      INFO: C compiler: gcc -pthread -B /opt/conda/compiler_compat -Wno-unused-result -Wsign-compare -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/conda/include -fPIC -O2 -isystem /opt/conda/include -fPIC
      
      INFO: compile options: '-c'
      INFO: gcc: test_program.c
      INFO: gcc -pthread -B /opt/conda/compiler_compat objects/test_program.o -o test_program
      INFO: C compiler: gcc -pthread -B /opt/conda/compiler_compat -Wno-unused-result -Wsign-compare -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/conda/include -fPIC -O2 -isystem /opt/conda/include -fPIC
      
      INFO: compile options: '-c'
      extra options: '-fopenmp'
      INFO: gcc: test_program.c
      INFO: gcc -pthread -B /opt/conda/compiler_compat objects/test_program.o -o test_program -fopenmp
      Compiling sklearn/__check_build/_check_build.pyx because it changed.
      Compiling sklearn/preprocessing/_csr_polynomial_expansion.pyx because it changed.
      Compiling sklearn/cluster/_dbscan_inner.pyx because it changed.
      Compiling sklearn/cluster/_hierarchical_fast.pyx because it changed.
      Compiling sklearn/cluster/_k_means_fast.pyx because it changed.
      Compiling sklearn/cluster/_k_means_lloyd.pyx because it changed.
      Compiling sklearn/cluster/_k_means_elkan.pyx because it changed.
      Compiling sklearn/datasets/_svmlight_format_fast.pyx because it changed.
      Compiling sklearn/decomposition/_online_lda_fast.pyx because it changed.
      Compiling sklearn/decomposition/_cdnmf_fast.pyx because it changed.
      Compiling sklearn/ensemble/_gradient_boosting.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/_gradient_boosting.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/histogram.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/splitting.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/_binning.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/_loss.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/_bitset.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/common.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/utils.pyx because it changed.
      Compiling sklearn/feature_extraction/_hashing_fast.pyx because it changed.
      Compiling sklearn/manifold/_utils.pyx because it changed.
      Compiling sklearn/manifold/_barnes_hut_tsne.pyx because it changed.
      Compiling sklearn/metrics/cluster/_expected_mutual_info_fast.pyx because it changed.
      Compiling sklearn/metrics/_pairwise_fast.pyx because it changed.
      Compiling sklearn/neighbors/_ball_tree.pyx because it changed.
      Compiling sklearn/neighbors/_kd_tree.pyx because it changed.
      Compiling sklearn/neighbors/_dist_metrics.pyx because it changed.
      Compiling sklearn/neighbors/_typedefs.pyx because it changed.
      Compiling sklearn/neighbors/_quad_tree.pyx because it changed.
      Compiling sklearn/tree/_tree.pyx because it changed.
      Compiling sklearn/tree/_splitter.pyx because it changed.
      Compiling sklearn/tree/_criterion.pyx because it changed.
      Compiling sklearn/tree/_utils.pyx because it changed.
      Compiling sklearn/utils/sparsefuncs_fast.pyx because it changed.
      Compiling sklearn/utils/_cython_blas.pyx because it changed.
      Compiling sklearn/utils/arrayfuncs.pyx because it changed.
      Compiling sklearn/utils/murmurhash.pyx because it changed.
      Compiling sklearn/utils/graph_shortest_path.pyx because it changed.
      Compiling sklearn/utils/_fast_dict.pyx because it changed.
      Compiling sklearn/utils/_openmp_helpers.pyx because it changed.
      Compiling sklearn/utils/_seq_dataset.pyx because it changed.
      Compiling sklearn/utils/_weight_vector.pyx because it changed.
      Compiling sklearn/utils/_random.pyx because it changed.
      Compiling sklearn/utils/_logistic_sigmoid.pyx because it changed.
      Compiling sklearn/svm/_newrand.pyx because it changed.
      Compiling sklearn/svm/_libsvm.pyx because it changed.
      Compiling sklearn/svm/_liblinear.pyx because it changed.
      Compiling sklearn/svm/_libsvm_sparse.pyx because it changed.
      Compiling sklearn/linear_model/_cd_fast.pyx because it changed.
      Compiling sklearn/linear_model/_sgd_fast.pyx because it changed.
      Compiling sklearn/linear_model/_sag_fast.pyx because it changed.
      Compiling sklearn/_isotonic.pyx because it changed.
      warning: sklearn/cluster/_dbscan_inner.pyx:17:5: Only extern functions can throw C++ exceptions.
      warning: sklearn/neighbors/_dist_metrics.pxd:19:64: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:29:65: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:38:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:42:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:65:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:68:52: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:75:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:77:67: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:336:5: Exception check on '_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:574:5: Exception check on '_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_update_chunk_sparse' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:294:31: Exception check after calling '__pyx_fuse_0_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_0_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:294:31: Exception check after calling '__pyx_fuse_1_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:385:60: Exception check after calling '__pyx_fuse_0_euclidean_dense_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_euclidean_dense_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:396:57: Exception check after calling '__pyx_fuse_0_euclidean_dense_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_euclidean_dense_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:385:60: Exception check after calling '__pyx_fuse_1_euclidean_dense_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_euclidean_dense_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:396:57: Exception check after calling '__pyx_fuse_1_euclidean_dense_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_euclidean_dense_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:528:32: Exception check after calling '__pyx_fuse_0_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_0_update_chunk_sparse' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:528:32: Exception check after calling '__pyx_fuse_1_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_update_chunk_sparse' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:624:61: Exception check after calling '__pyx_fuse_0_euclidean_sparse_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_euclidean_sparse_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:636:58: Exception check after calling '__pyx_fuse_0_euclidean_sparse_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_euclidean_sparse_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:624:61: Exception check after calling '__pyx_fuse_1_euclidean_sparse_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_euclidean_sparse_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:636:58: Exception check after calling '__pyx_fuse_1_euclidean_sparse_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_euclidean_sparse_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_fast.pyx:34:5: Exception check on '_euclidean_dense_dense' will always require the GIL to be acquired. Declare '_euclidean_dense_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/cluster/_k_means_fast.pyx:66:5: Exception check on '_euclidean_sparse_dense' will always require the GIL to be acquired. Declare '_euclidean_sparse_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:164:5: Exception check on '_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:361:5: Exception check on '_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_update_chunk_sparse' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:131:31: Exception check after calling '__pyx_fuse_0_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_0_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:131:31: Exception check after calling '__pyx_fuse_1_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:201:9: Exception check after calling '__pyx_fuse_0_gemm' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_gemm' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_0_gemm' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:201:9: Exception check after calling '__pyx_fuse_1_gemm' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_gemm' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_gemm' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:327:32: Exception check after calling '__pyx_fuse_0_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_0_update_chunk_sparse' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:327:32: Exception check after calling '__pyx_fuse_1_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_update_chunk_sparse' to allow an error code to be returned.
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_bitset.pyx:19:5: Exception check on 'init_bitset' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'init_bitset' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'init_bitset' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_bitset.pyx:27:5: Exception check on 'set_bitset' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'set_bitset' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'set_bitset' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_bitset.pxd:11:28: No exception value declared for 'in_bitset' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_bitset.pxd:13:40: No exception value declared for 'in_bitset_memoryview' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_bitset.pxd:16:42: No exception value declared for 'in_bitset_2d_memoryview' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_loss.pyx:187:5: Exception check on '_compute_softmax' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_compute_softmax' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_compute_softmax' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_loss.pyx:167:28: Exception check after calling '_compute_softmax' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_compute_softmax' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_compute_softmax' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_loss.pyx:178:28: Exception check after calling '_compute_softmax' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_compute_softmax' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_compute_softmax' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx:72:38: Exception check after calling 'in_bitset_2d_memoryview' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'in_bitset_2d_memoryview' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx:77:40: Exception check after calling 'in_bitset_2d_memoryview' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'in_bitset_2d_memoryview' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx:136:38: Exception check after calling 'in_bitset_2d_memoryview' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'in_bitset_2d_memoryview' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:252:6: Exception check on '_build_histogram_naive' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_naive' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_naive' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:276:6: Exception check on '_subtract_histograms' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_subtract_histograms' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_subtract_histograms' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:300:6: Exception check on '_build_histogram' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:347:6: Exception check on '_build_histogram_no_hessian' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_no_hessian' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_no_hessian' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:391:6: Exception check on '_build_histogram_root' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_root' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_root' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:444:6: Exception check on '_build_histogram_root_no_hessian' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_root_no_hessian' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_root_no_hessian' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:158:60: Exception check after calling '_compute_histogram_brute_single_feature' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_compute_histogram_brute_single_feature' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_compute_histogram_brute_single_feature' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:190:48: Exception check after calling '_build_histogram_root_no_hessian' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_root_no_hessian' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_root_no_hessian' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:194:37: Exception check after calling '_build_histogram_root' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_root' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_root' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:199:43: Exception check after calling '_build_histogram_no_hessian' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_no_hessian' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_no_hessian' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:203:32: Exception check after calling '_build_histogram' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:244:32: Exception check after calling '_subtract_histograms' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_subtract_histograms' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_subtract_histograms' to allow an error code to be returned.
      warning: sklearn/ensemble/_hist_gradient_boosting/splitting.pyx:19:0: The 'IF' statement is deprecated and will be removed in a future Cython version. Consider using runtime conditions or C macros instead. See https://github.com/cython/cython/issues/4310
      warning: sklearn/ensemble/_hist_gradient_boosting/splitting.pyx:309:12: The 'IF' statement is deprecated and will be removed in a future Cython version. Consider using runtime conditions or C macros instead. See https://github.com/cython/cython/issues/4310
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              if n_used_bins <= 1:
                  free(cat_infos)
                  return
      
              qsort(cat_infos, n_used_bins, sizeof(categorical_info),
                    compare_cat_infos)
                    ^
      ------------------------------------------------------------
      
      sklearn/ensemble/_hist_gradient_boosting/splitting.pyx:912:14: Cannot assign type 'int (const void *, const void *) except? -1 nogil' to 'int (*)(const void *, const void *) noexcept nogil'. Exception values are incompatible. Suggest adding 'noexcept' to the type of 'compare_cat_infos'.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/ensemble/_hist_gradient_boosting/splitting.pyx
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # Max value for our rand_r replacement (near the bottom).
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:18:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       np.int_t n_samples,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:19:33: 'int_t' is not a type identifier
      performance hint: sklearn/linear_model/_cd_fast.pyx:48:5: Exception check on 'fmax' will always require the GIL to be acquired. Declare 'fmax' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_cd_fast.pyx:54:5: Exception check on 'fsign' will always require the GIL to be acquired. Declare 'fsign' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_cd_fast.pyx:63:5: Exception check on 'abs_max' will always require the GIL to be acquired. Declare 'abs_max' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_cd_fast.pyx:75:5: Exception check on 'max' will always require the GIL to be acquired. Declare 'max' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_cd_fast.pyx:87:5: Exception check on 'diff_abs_max' will always require the GIL to be acquired. Declare 'diff_abs_max' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/linear_model/_cd_fast.pyx
      performance hint: sklearn/linear_model/_sag_fast.pyx:1202:5: Exception check on 'predict_sample64' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'predict_sample64' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'predict_sample64' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:1249:5: Exception check on 'predict_sample32' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'predict_sample32' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'predict_sample32' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:467:43: Exception check after calling 'random' will always require the GIL to be acquired. Declare 'random' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sag_fast.pyx:495:32: Exception check after calling 'predict_sample64' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'predict_sample64' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'predict_sample64' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:500:35: Exception check after calling 'dloss' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'dloss' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:503:44: Exception check after calling 'dloss' will always require the GIL to be acquired. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sag_fast.pyx:798:43: Exception check after calling 'random' will always require the GIL to be acquired. Declare 'random' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sag_fast.pyx:826:32: Exception check after calling 'predict_sample32' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'predict_sample32' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'predict_sample32' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:831:35: Exception check after calling 'dloss' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'dloss' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:834:44: Exception check after calling 'dloss' will always require the GIL to be acquired. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sag_fast.pyx:1337:24: Exception check after calling 'next' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'next' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'next' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:1341:28: Exception check after calling 'predict_sample64' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'predict_sample64' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'predict_sample64' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:1345:27: Exception check after calling 'dloss' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'dloss' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:1348:39: Exception check after calling '_loss' will always require the GIL to be acquired. Declare '_loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:666:5: Exception check on 'l1penalty' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'l1penalty' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'l1penalty' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:514:31: Exception check after calling 'shuffle' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'shuffle' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'shuffle' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:516:28: Exception check after calling 'next' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'next' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'next' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:524:25: Exception check after calling 'dot' will always require the GIL to be acquired. Declare 'dot' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:531:40: Exception check after calling 'loss' will always require the GIL to be acquired. Declare 'loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:542:45: Exception check after calling 'loss' will always require the GIL to be acquired. Declare 'loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:545:38: Exception check after calling 'loss' will always require the GIL to be acquired. Declare 'loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:547:38: Exception check after calling 'dloss' will always require the GIL to be acquired. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:569:27: Exception check after calling 'scale' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'scale' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'scale' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:571:25: Exception check after calling 'add' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'add' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'add' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:580:33: Exception check after calling 'add_average' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'add_average' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'add_average' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:587:29: Exception check after calling 'l1penalty' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'l1penalty' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'l1penalty' to allow an error code to be returned.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/manifold/_barnes_hut_tsne.pyx:224:30: Exception check after calling 'summarize' will always require the GIL to be acquired. Declare 'summarize' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      warning: sklearn/neighbors/_binary_tree.pxi:595:66: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:603:49: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:665:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1215:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1224:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1805:78: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_ball_tree.pyx:109:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_ball_tree.pyx:125:82: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_ball_tree.pyx:136:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:19:64: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:29:65: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:38:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:42:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:65:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:68:52: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:75:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:77:67: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/neighbors/_binary_tree.pxi:539:5: Exception check on 'dual_swap' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'dual_swap' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'dual_swap' to allow an error code to be returned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              # determine number of levels in the tree, and from this
              # the number of nodes in the tree.  This results in leaf nodes
              # with numbers of points between leaf_size and 2 * leaf_size
              self.n_levels = int(
                  np.log2(fmax(1, (n_samples - 1) / self.leaf_size)) + 1)
              self.n_nodes = (2 ** self.n_levels) - 1
                                                  ^
      ------------------------------------------------------------
      
      sklearn/neighbors/_binary_tree.pxi:1079:44: Cannot assign type 'double' to 'ITYPE_t' (alias of 'long')
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/neighbors/_ball_tree.pyx
      warning: sklearn/neighbors/_dist_metrics.pxd:19:64: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:29:65: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:38:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:42:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:65:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:68:52: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:75:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:77:67: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:304:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:312:52: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:344:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:348:67: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:427:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:431:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:434:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:437:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:467:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:476:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:479:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:482:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:505:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:538:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:569:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:577:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:580:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:583:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:629:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:637:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:640:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:643:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:694:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:710:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:713:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:716:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:739:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:761:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:784:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:810:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:840:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:864:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:889:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:914:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:938:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:962:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:986:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:1020:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:1026:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:1029:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:1032:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:1129:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:595:66: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:603:49: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:665:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1215:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1224:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1805:78: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_kd_tree.pyx:91:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_kd_tree.pyx:152:82: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:19:64: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:29:65: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:38:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:42:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:65:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:68:52: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:75:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:77:67: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/neighbors/_binary_tree.pxi:539:5: Exception check on 'dual_swap' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'dual_swap' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'dual_swap' to allow an error code to be returned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              # determine number of levels in the tree, and from this
              # the number of nodes in the tree.  This results in leaf nodes
              # with numbers of points between leaf_size and 2 * leaf_size
              self.n_levels = int(
                  np.log2(fmax(1, (n_samples - 1) / self.leaf_size)) + 1)
              self.n_nodes = (2 ** self.n_levels) - 1
                                                  ^
      ------------------------------------------------------------
      
      sklearn/neighbors/_binary_tree.pxi:1079:44: Cannot assign type 'double' to 'ITYPE_t' (alias of 'long')
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/neighbors/_kd_tree.pyx
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pyx:120:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pyx:309:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pyx:468:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pyx:563:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pyx:575:70: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          def __cinit__(self, int n_dimensions, int verbose):
              """Constructor."""
              # Parameters of the tree
              self.n_dimensions = n_dimensions
              self.verbose = verbose
              self.n_cells_per_cell = 2 ** self.n_dimensions
                                        ^
      ------------------------------------------------------------
      
      sklearn/neighbors/_quad_tree.pyx:60:34: Cannot assign type 'double' to 'SIZE_t' (alias of 'long')
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/neighbors/_quad_tree.pyx
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              free_problem(problem)
              free_parameter(param)
              raise ValueError(error_msg)
      
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_liblinear.pyx:55:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              free_parameter(param)
              raise ValueError(error_msg)
      
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
          blas_functions.axpy = _axpy[double]
                                     ^
      ------------------------------------------------------------
      
      sklearn/svm/_liblinear.pyx:56:31: Cannot assign type 'void (int, double, double *, int, double *, int) except * nogil' to 'axpy_func' (alias of 'void (*)(int, double, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              raise ValueError(error_msg)
      
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
          blas_functions.axpy = _axpy[double]
          blas_functions.scal = _scal[double]
                                     ^
      ------------------------------------------------------------
      
      sklearn/svm/_liblinear.pyx:57:31: Cannot assign type 'void (int, double, double *, int) except * nogil' to 'scal_func' (alias of 'void (*)(int, double, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
          blas_functions.axpy = _axpy[double]
          blas_functions.scal = _scal[double]
          blas_functions.nrm2 = _nrm2[double]
                                     ^
      ------------------------------------------------------------
      
      sklearn/svm/_liblinear.pyx:58:31: Cannot assign type 'double (int, double *, int) except * nogil' to 'nrm2_func' (alias of 'double (*)(int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/svm/_liblinear.pyx
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          if error_msg:
              # for SVR: epsilon is called p in libsvm
              error_repl = error_msg.decode('utf-8').replace("p < 0", "epsilon < 0")
              raise ValueError(error_repl)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm.pyx:194:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                             class_weight_label.data, class_weight.data)
          model = set_model(&param, <int> nSV.shape[0], SV.data, SV.shape,
                            support.data, support.shape, sv_coef.strides,
                            sv_coef.data, intercept.data, nSV.data, probA.data, probB.data)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm.pyx:358:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                            sv_coef.data, intercept.data, nSV.data,
                            probA.data, probB.data)
      
          cdef np.npy_intp n_class = get_nr(model)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm.pyx:464:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              n_class = 1
          else:
              n_class = get_nr(model)
              n_class = n_class * (n_class - 1) // 2
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm.pyx:570:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          if error_msg:
              raise ValueError(error_msg)
      
          cdef np.ndarray[np.float64_t, ndim=1, mode='c'] target
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm.pyx:714:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/svm/_libsvm.pyx
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          if error_msg:
              free_problem(problem)
              free_param(param)
              raise ValueError(error_msg)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm_sparse.pyx:153:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                                sv_coef.data, intercept.data,
                                nSV.data, probA.data, probB.data)
          #TODO: use check_model
          dec_values = np.empty(T_indptr.shape[0]-1)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm_sparse.pyx:284:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          #TODO: use check_model
          cdef np.npy_intp n_class = get_nr(model)
          cdef int rv
          dec_values = np.empty((T_indptr.shape[0]-1, n_class), dtype=np.float64)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm_sparse.pyx:343:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              n_class = get_nr(model)
              n_class = n_class * (n_class - 1) // 2
      
          dec_values = np.empty((T_indptr.shape[0] - 1, n_class), dtype=np.float64)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm_sparse.pyx:412:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/svm/_libsvm_sparse.pyx
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:61:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:86:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:93:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:100:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:282:76: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:348:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:375:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:402:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:744:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:788:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:799:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:810:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:1032:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:1082:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:1113:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:1141:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/tree/_criterion.pyx:169:30: Exception check after calling 'children_impurity' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'children_impurity' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'children_impurity' to allow an error code to be returned.
      performance hint: sklearn/tree/_criterion.pyx:540:44: Exception check after calling 'log' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'log' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/tree/_criterion.pyx:574:49: Exception check after calling 'log' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'log' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/tree/_criterion.pyx:579:50: Exception check after calling 'log' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'log' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/tree/_criterion.pyx:1076:89: Exception check after calling 'get_median' will always require the GIL to be acquired. Declare 'get_median' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1104:74: Exception check after calling 'size' will always require the GIL to be acquired. Declare 'size' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1106:62: Exception check after calling 'pop' will always require the GIL to be acquired. Declare 'pop' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1132:75: Exception check after calling 'size' will always require the GIL to be acquired. Declare 'size' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1134:63: Exception check after calling 'pop' will always require the GIL to be acquired. Declare 'pop' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1172:70: Exception check after calling 'remove' will always require the GIL to be acquired. Declare 'remove' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1188:69: Exception check after calling 'remove' will always require the GIL to be acquired. Declare 'remove' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1252:74: Exception check after calling 'get_median' will always require the GIL to be acquired. Declare 'get_median' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1264:75: Exception check after calling 'get_median' will always require the GIL to be acquired. Declare 'get_median' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1365:32: Exception check after calling 'poisson_loss' will always require the GIL to be acquired. Declare 'poisson_loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1400:56: Exception check after calling 'log' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'log' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/tree/_criterion.pyx:1401:58: Exception check after calling 'log' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'log' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/tree/_criterion.pyx:1422:44: Exception check after calling 'poisson_loss' will always require the GIL to be acquired. Declare 'poisson_loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1425:45: Exception check after calling 'poisson_loss' will always require the GIL to be acquired. Declare 'poisson_loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:184:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:214:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:268:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:582:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:1100:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:1330:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/tree/_splitter.pyx:46:5: Exception check on '_init_split' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_init_split' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_init_split' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:460:5: Exception check on 'sort' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'sort' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'sort' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:467:5: Exception check on 'swap' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'swap' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'swap' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:496:5: Exception check on 'introsort' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'introsort' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'introsort' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:529:5: Exception check on 'sift_down' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'sift_down' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'sift_down' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:552:5: Exception check on 'heapsort' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'heapsort' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'heapsort' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:944:5: Exception check on 'binary_search' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'binary_search' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'binary_search' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:969:5: Exception check on 'extract_nnz_index_to_samples' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'extract_nnz_index_to_samples' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'extract_nnz_index_to_samples' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:1009:5: Exception check on 'extract_nnz_binary_search' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'extract_nnz_binary_search' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'extract_nnz_binary_search' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:1081:5: Exception check on 'sparse_swap' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'sparse_swap' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'sparse_swap' to allow an error code to be returned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          if not is_samples_sorted[0]:
              n_samples = end - start
              memcpy(sorted_samples + start, samples + start,
                     n_samples * sizeof(SIZE_t))
              qsort(sorted_samples + start, n_samples, sizeof(SIZE_t),
                    compare_SIZE_t)
                    ^
      ------------------------------------------------------------
      
      sklearn/tree/_splitter.pyx:1037:14: Cannot assign type 'int (const void *, const void *) except? -1 nogil' to 'int (*)(const void *, const void *) noexcept nogil'. Exception values are incompatible. Suggest adding 'noexcept' to the type of 'compare_SIZE_t'.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/tree/_splitter.pyx
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pyx:273:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pyx:421:76: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pyx:678:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pyx:690:70: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pyx:724:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
              # Initial capacity
              cdef int init_capacity
      
              if tree.max_depth <= 10:
                  init_capacity = (2 ** (tree.max_depth + 1)) - 1
                                                              ^
      ------------------------------------------------------------
      
      sklearn/tree/_tree.pyx:151:56: Cannot assign type 'double' to 'int'
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/tree/_tree.pyx
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:29:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:114:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:230:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:318:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:335:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:493:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:507:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # Max value for our rand_r replacement (near the bottom).
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:18:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       np.int_t n_samples,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:19:33: 'int_t' is not a type identifier
      performance hint: sklearn/tree/_utils.pyx:29:5: Exception check on 'safe_realloc' will always require the GIL to be acquired. Declare 'safe_realloc' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_utils.pxd:55:20: No exception value declared for 'rand_int' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      performance hint: sklearn/tree/_utils.pxd:59:24: No exception value declared for 'rand_uniform' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      performance hint: sklearn/tree/_utils.pxd:63:15: No exception value declared for 'log' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/tree/_utils.pyx
      performance hint: sklearn/utils/_cython_blas.pyx:20:5: Exception check on '_dot' will always require the GIL to be acquired. Declare '_dot' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/utils/_cython_blas.pyx:33:5: Exception check on '_asum' will always require the GIL to be acquired. Declare '_asum' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/utils/_cython_blas.pyx:45:5: Exception check on '_axpy' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_axpy' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_axpy' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:58:5: Exception check on '_nrm2' will always require the GIL to be acquired. Declare '_nrm2' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/utils/_cython_blas.pyx:70:5: Exception check on '_copy' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_copy' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_copy' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:82:5: Exception check on '_scal' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_scal' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_scal' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:94:5: Exception check on '_rotg' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_rotg' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_rotg' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:107:5: Exception check on '_rot' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_rot' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_rot' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:124:5: Exception check on '_gemv' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_gemv' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_gemv' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:153:5: Exception check on '_ger' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_ger' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_ger' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:183:5: Exception check on '_gemm' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_gemm' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_gemm' to allow an error code to be returned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              dec(end)
              # Construct our arguments
              cdef pair[ITYPE_t, DTYPE_t] args
              args.first = key
              args.second = value
              self.my_map.insert(end, args)
                                 ^
      ------------------------------------------------------------
      
      sklearn/utils/_fast_dict.pyx:138:27: Cannot assign type 'iterator' to 'const_iterator'
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/utils/_fast_dict.pyx
      warning: sklearn/utils/_openmp_helpers.pyx:1:0: The 'IF' statement is deprecated and will be removed in a future Cython version. Consider using runtime conditions or C macros instead. See https://github.com/cython/cython/issues/4310
      warning: sklearn/utils/_openmp_helpers.pyx:44:4: The 'IF' statement is deprecated and will be removed in a future Cython version. Consider using runtime conditions or C macros instead. See https://github.com/cython/cython/issues/4310
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # Max value for our rand_r replacement (near the bottom).
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:18:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       np.int_t n_samples,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:19:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      from . import check_random_state
      
      cdef UINT32_t DEFAULT_SEED = 1
      
      
      cpdef _sample_without_replacement_check_input(np.int_t n_population,
                                                    ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:27:46: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
      cdef UINT32_t DEFAULT_SEED = 1
      
      
      cpdef _sample_without_replacement_check_input(np.int_t n_population,
                                                    np.int_t n_samples):
                                                    ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:28:46: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                               'n_samples, got n_samples > n_population (%s > %s)'
                               % (n_samples, n_population))
      
      
      cpdef _sample_without_replacement_with_tracking_selection(
              np.int_t n_population,
              ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:41:8: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                               % (n_samples, n_population))
      
      
      cpdef _sample_without_replacement_with_tracking_selection(
              np.int_t n_population,
              np.int_t n_samples,
              ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:42:8: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              out[i] = j
      
          return out
      
      
      cpdef _sample_without_replacement_with_pool(np.int_t n_population,
                                                  ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:105:44: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
          return out
      
      
      cpdef _sample_without_replacement_with_pool(np.int_t n_population,
                                                  np.int_t n_samples,
                                                  ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:106:44: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
          return out
      
      
      cpdef _sample_without_replacement_with_reservoir_sampling(
          np.int_t n_population,
          ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:165:4: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          return out
      
      
      cpdef _sample_without_replacement_with_reservoir_sampling(
          np.int_t n_population,
          np.int_t n_samples,
          ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:166:4: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                  out[j] = i
      
          return out
      
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:223:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
          return out
      
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       np.int_t n_samples,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:224:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          out : ndarray of shape (n_samples,)
              The sampled subsets of integer.
          """
          _sample_without_replacement_check_input(n_population, n_samples)
      
          cdef np.int_t i
               ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:84:9: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              The sampled subsets of integer.
          """
          _sample_without_replacement_check_input(n_population, n_samples)
      
          cdef np.int_t i
          cdef np.int_t j
               ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:85:9: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          """
          _sample_without_replacement_check_input(n_population, n_samples)
      
          cdef np.int_t i
          cdef np.int_t j
          cdef np.ndarray[np.int_t, ndim=1] out = np.empty((n_samples, ), dtype=int)
                             ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:86:23: Invalid type.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/utils/_random.pyx
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # Max value for our rand_r replacement (near the bottom).
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:18:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       np.int_t n_samples,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:19:33: 'int_t' is not a type identifier
      Traceback (most recent call last):
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/utils/_seq_dataset.pyx
      performance hint: sklearn/utils/_weight_vector.pyx:169:29: Exception check after calling 'reset_wscale' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'reset_wscale' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'reset_wscale' to allow an error code to be returned.
      performance hint: sklearn/utils/_weight_vector.pyx:174:17: Exception check after calling '__pyx_fuse_1_axpy' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_axpy' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_axpy' to allow an error code to be returned.
      performance hint: sklearn/utils/_weight_vector.pyx:176:17: Exception check after calling '__pyx_fuse_1_scal' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_scal' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_scal' to allow an error code to be returned.
      performance hint: sklearn/utils/_weight_vector.pyx:180:13: Exception check after calling '__pyx_fuse_1_scal' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_scal' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_scal' to allow an error code to be returned.
      [ 1/53] Cythonizing sklearn/__check_build/_check_build.pyx
      [ 2/53] Cythonizing sklearn/_isotonic.pyx
      [ 3/53] Cythonizing sklearn/cluster/_dbscan_inner.pyx
      [ 4/53] Cythonizing sklearn/cluster/_hierarchical_fast.pyx
      [ 5/53] Cythonizing sklearn/cluster/_k_means_elkan.pyx
      [ 6/53] Cythonizing sklearn/cluster/_k_means_fast.pyx
      [ 7/53] Cythonizing sklearn/cluster/_k_means_lloyd.pyx
      [ 8/53] Cythonizing sklearn/datasets/_svmlight_format_fast.pyx
      [ 9/53] Cythonizing sklearn/decomposition/_cdnmf_fast.pyx
      [10/53] Cythonizing sklearn/decomposition/_online_lda_fast.pyx
      [11/53] Cythonizing sklearn/ensemble/_gradient_boosting.pyx
      [12/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/_binning.pyx
      [13/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/_bitset.pyx
      [14/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/_gradient_boosting.pyx
      [15/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/_loss.pyx
      [16/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx
      [17/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/common.pyx
      [18/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/histogram.pyx
      [19/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/splitting.pyx
      [20/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/utils.pyx
      [21/53] Cythonizing sklearn/feature_extraction/_hashing_fast.pyx
      [22/53] Cythonizing sklearn/linear_model/_cd_fast.pyx
      [23/53] Cythonizing sklearn/linear_model/_sag_fast.pyx
      [24/53] Cythonizing sklearn/linear_model/_sgd_fast.pyx
      [25/53] Cythonizing sklearn/manifold/_barnes_hut_tsne.pyx
      [26/53] Cythonizing sklearn/manifold/_utils.pyx
      [27/53] Cythonizing sklearn/metrics/_pairwise_fast.pyx
      [28/53] Cythonizing sklearn/metrics/cluster/_expected_mutual_info_fast.pyx
      [29/53] Cythonizing sklearn/neighbors/_ball_tree.pyx
      [30/53] Cythonizing sklearn/neighbors/_dist_metrics.pyx
      [31/53] Cythonizing sklearn/neighbors/_kd_tree.pyx
      [32/53] Cythonizing sklearn/neighbors/_quad_tree.pyx
      [33/53] Cythonizing sklearn/neighbors/_typedefs.pyx
      [34/53] Cythonizing sklearn/preprocessing/_csr_polynomial_expansion.pyx
      [35/53] Cythonizing sklearn/svm/_liblinear.pyx
      [36/53] Cythonizing sklearn/svm/_libsvm.pyx
      [37/53] Cythonizing sklearn/svm/_libsvm_sparse.pyx
      [38/53] Cythonizing sklearn/svm/_newrand.pyx
      [39/53] Cythonizing sklearn/tree/_criterion.pyx
      [40/53] Cythonizing sklearn/tree/_splitter.pyx
      [41/53] Cythonizing sklearn/tree/_tree.pyx
      [42/53] Cythonizing sklearn/tree/_utils.pyx
      [43/53] Cythonizing sklearn/utils/_cython_blas.pyx
      [44/53] Cythonizing sklearn/utils/_fast_dict.pyx
      [45/53] Cythonizing sklearn/utils/_logistic_sigmoid.pyx
      [46/53] Cythonizing sklearn/utils/_openmp_helpers.pyx
      [47/53] Cythonizing sklearn/utils/_random.pyx
      [48/53] Cythonizing sklearn/utils/_seq_dataset.pyx
      [49/53] Cythonizing sklearn/utils/_weight_vector.pyx
      [50/53] Cythonizing sklearn/utils/arrayfuncs.pyx
      [51/53] Cythonizing sklearn/utils/graph_shortest_path.pyx
      [52/53] Cythonizing sklearn/utils/murmurhash.pyx
      [53/53] Cythonizing sklearn/utils/sparsefuncs_fast.pyx
      multiprocessing.pool.RemoteTraceback:
      """
      Traceback (most recent call last):
        File "/opt/conda/lib/python3.10/multiprocessing/pool.py", line 125, in worker
          result = (True, func(*args, **kwds))
        File "/opt/conda/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
          return list(map(*args))
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/ensemble/_hist_gradient_boosting/splitting.pyx
      """
      
      The above exception was the direct cause of the following exception:
      
      Traceback (most recent call last):
        File "/opt/conda/lib/python3.10/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 353, in <module>
          main()
        File "/opt/conda/lib/python3.10/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 335, in main
          json_out['return_val'] = hook(**hook_input['kwargs'])
        File "/opt/conda/lib/python3.10/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 149, in prepare_metadata_for_build_wheel
          return hook(metadata_directory, config_settings)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/setuptools/build_meta.py", line 377, in prepare_metadata_for_build_wheel
          self.run_setup()
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/setuptools/build_meta.py", line 522, in run_setup
          super().run_setup(setup_script=setup_script)
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/setuptools/build_meta.py", line 320, in run_setup
          exec(code, locals())
        File "<string>", line 301, in <module>
        File "<string>", line 297, in setup_package
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/numpy/distutils/core.py", line 135, in setup
          config = configuration()
        File "<string>", line 188, in configuration
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/numpy/distutils/misc_util.py", line 1041, in add_subpackage
          config_list = self.get_subpackage(subpackage_name, subpackage_path,
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/numpy/distutils/misc_util.py", line 1007, in get_subpackage
          config = self._get_configuration_from_setup_py(
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/numpy/distutils/misc_util.py", line 949, in _get_configuration_from_setup_py
          config = setup_module.configuration(*args)
        File "/tmp/pip-install-g76ynuc2/scikit-learn_0a5ad4ad2faa4f1f898a493535efe5fb/sklearn/setup.py", line 83, in configuration
          cythonize_extensions(top_path, config)
        File "/tmp/pip-install-g76ynuc2/scikit-learn_0a5ad4ad2faa4f1f898a493535efe5fb/sklearn/_build_utils/__init__.py", line 70, in cythonize_extensions
          config.ext_modules = cythonize(
        File "/tmp/pip-build-env-_184jmxb/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1145, in cythonize
          result.get(99999)  # seconds
        File "/opt/conda/lib/python3.10/multiprocessing/pool.py", line 774, in get
          raise self._value
      Cython.Compiler.Errors.CompileError: sklearn/ensemble/_hist_gradient_boosting/splitting.pyx
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: metadata-generation-failed

× Encountered error while generating package metadata.
╰─> See above for output.

note: This is an issue with the package mentioned above, not pip.
hint: See above for details.
Requirement already satisfied: opencv-python in /opt/conda/lib/python3.10/site-packages (4.10.0.84)
Requirement already satisfied: numpy>=1.21.2 in /opt/conda/lib/python3.10/site-packages (from opencv-python) (1.26.4)
Requirement already satisfied: tensorflow in /opt/conda/lib/python3.10/site-packages (2.16.1)
Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.4.0)
Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.6.3)
Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (24.3.25)
Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.5.4)
Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)
Requirement already satisfied: h5py>=3.10.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.11.0)
Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (18.1.1)
Requirement already satisfied: ml-dtypes~=0.3.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.3.2)
Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.0)
Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow) (21.3)
Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.20.3)
Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.32.3)
Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow) (70.0.0)
Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)
Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.4.0)
Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (4.12.2)
Requirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)
Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.62.2)
Requirement already satisfied: tensorboard<2.17,>=2.16 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.16.2)
Requirement already satisfied: keras>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.3)
Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.37.0)
Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.26.4)
Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow) (0.43.0)
Requirement already satisfied: rich in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow) (13.7.1)
Requirement already satisfied: namex in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow) (0.0.8)
Requirement already satisfied: optree in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow) (0.11.0)
Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (3.7)
Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (1.26.18)
Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (2024.8.30)
Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (3.6)
Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (0.7.2)
Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (3.0.4)
Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow) (3.1.2)
Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.17,>=2.16->tensorflow) (2.1.5)
Requirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=3.0.0->tensorflow) (3.0.0)
Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=3.0.0->tensorflow) (2.18.0)
Requirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich->keras>=3.0.0->tensorflow) (0.1.2)
Requirement already satisfied: joblib in /opt/conda/lib/python3.10/site-packages (1.4.2)
Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)
Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.1)
Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.53.0)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)
Requirement already satisfied: numpy<2,>=1.20 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.26.4)
Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (21.3)
Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (10.3.0)
Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.2)
Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)
Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)
Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (2.2.2)
Requirement already satisfied: numpy>=1.22.4 in /opt/conda/lib/python3.10/site-packages (from pandas) (1.26.4)
Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas) (2.9.0.post0)
Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas) (2024.1)
Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas) (2024.1)
Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)
Collecting albumentations==0.5.2
  Downloading albumentations-0.5.2-py3-none-any.whl.metadata (30 kB)
Requirement already satisfied: numpy>=1.11.1 in /opt/conda/lib/python3.10/site-packages (from albumentations==0.5.2) (1.26.4)
Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from albumentations==0.5.2) (1.14.1)
Requirement already satisfied: scikit-image>=0.16.1 in /opt/conda/lib/python3.10/site-packages (from albumentations==0.5.2) (0.17.2)
Requirement already satisfied: imgaug>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from albumentations==0.5.2) (0.4.0)
Requirement already satisfied: PyYAML in /opt/conda/lib/python3.10/site-packages (from albumentations==0.5.2) (6.0.2)
Requirement already satisfied: opencv-python-headless>=4.1.1 in /opt/conda/lib/python3.10/site-packages (from albumentations==0.5.2) (4.10.0.84)
Requirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from imgaug>=0.4.0->albumentations==0.5.2) (1.16.0)
Requirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from imgaug>=0.4.0->albumentations==0.5.2) (10.3.0)
Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from imgaug>=0.4.0->albumentations==0.5.2) (3.7.5)
Requirement already satisfied: opencv-python in /opt/conda/lib/python3.10/site-packages (from imgaug>=0.4.0->albumentations==0.5.2) (4.10.0.84)
Requirement already satisfied: imageio in /opt/conda/lib/python3.10/site-packages (from imgaug>=0.4.0->albumentations==0.5.2) (2.34.1)
Requirement already satisfied: Shapely in /opt/conda/lib/python3.10/site-packages (from imgaug>=0.4.0->albumentations==0.5.2) (1.8.5.post1)
Requirement already satisfied: networkx>=2.0 in /opt/conda/lib/python3.10/site-packages (from scikit-image>=0.16.1->albumentations==0.5.2) (3.3)
Requirement already satisfied: tifffile>=2019.7.26 in /opt/conda/lib/python3.10/site-packages (from scikit-image>=0.16.1->albumentations==0.5.2) (2024.5.22)
Requirement already satisfied: PyWavelets>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-image>=0.16.1->albumentations==0.5.2) (1.6.0)
Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->imgaug>=0.4.0->albumentations==0.5.2) (1.2.1)
Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->imgaug>=0.4.0->albumentations==0.5.2) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->imgaug>=0.4.0->albumentations==0.5.2) (4.53.0)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->imgaug>=0.4.0->albumentations==0.5.2) (1.4.5)
Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->imgaug>=0.4.0->albumentations==0.5.2) (21.3)
Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->imgaug>=0.4.0->albumentations==0.5.2) (3.1.2)
Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->imgaug>=0.4.0->albumentations==0.5.2) (2.9.0.post0)
Downloading albumentations-0.5.2-py3-none-any.whl (72 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 72.2/72.2 kB 3.1 MB/s eta 0:00:00
Installing collected packages: albumentations
  Attempting uninstall: albumentations
    Found existing installation: albumentations 1.4.17
    Uninstalling albumentations-1.4.17:
      Successfully uninstalled albumentations-1.4.17
Successfully installed albumentations-0.5.2
Collecting hydra-core==1.1.0
  Downloading hydra_core-1.1.0-py3-none-any.whl.metadata (4.1 kB)
Collecting omegaconf==2.1.* (from hydra-core==1.1.0)
  Downloading omegaconf-2.1.2-py3-none-any.whl.metadata (3.6 kB)
Collecting antlr4-python3-runtime==4.8 (from hydra-core==1.1.0)
  Downloading antlr4-python3-runtime-4.8.tar.gz (112 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 112.4/112.4 kB 3.4 MB/s eta 0:00:00
  Preparing metadata (setup.py) ... done
Requirement already satisfied: PyYAML>=5.1.0 in /opt/conda/lib/python3.10/site-packages (from omegaconf==2.1.*->hydra-core==1.1.0) (6.0.2)
Downloading hydra_core-1.1.0-py3-none-any.whl (144 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 144.6/144.6 kB 7.7 MB/s eta 0:00:00
Downloading omegaconf-2.1.2-py3-none-any.whl (74 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 74.7/74.7 kB 6.9 MB/s eta 0:00:00
Building wheels for collected packages: antlr4-python3-runtime
  Building wheel for antlr4-python3-runtime (setup.py) ... done
  Created wheel for antlr4-python3-runtime: filename=antlr4_python3_runtime-4.8-py3-none-any.whl size=141211 sha256=10d535d0ce6e30ae703ef12f4fed9fa202ad8d58611a04917164a045822fd7b1
  Stored in directory: /root/.cache/pip/wheels/a7/20/bd/e1477d664f22d99989fd28ee1a43d6633dddb5cb9e801350d5
Successfully built antlr4-python3-runtime
Installing collected packages: antlr4-python3-runtime, omegaconf, hydra-core
  Attempting uninstall: antlr4-python3-runtime
    Found existing installation: antlr4-python3-runtime 4.9.3
    Uninstalling antlr4-python3-runtime-4.9.3:
      Successfully uninstalled antlr4-python3-runtime-4.9.3
  Attempting uninstall: omegaconf
    Found existing installation: omegaconf 2.3.0
    Uninstalling omegaconf-2.3.0:
      Successfully uninstalled omegaconf-2.3.0
Successfully installed antlr4-python3-runtime-4.8 hydra-core-1.1.0 omegaconf-2.1.2
Collecting pytorch-lightning==1.2.9
  Downloading pytorch_lightning-1.2.9-py3-none-any.whl.metadata (24 kB)
Requirement already satisfied: numpy>=1.16.6 in /opt/conda/lib/python3.10/site-packages (from pytorch-lightning==1.2.9) (1.26.4)
Requirement already satisfied: torch>=1.4 in /opt/conda/lib/python3.10/site-packages (from pytorch-lightning==1.2.9) (2.4.0)
Requirement already satisfied: future>=0.17.1 in /opt/conda/lib/python3.10/site-packages (from pytorch-lightning==1.2.9) (1.0.0)
Requirement already satisfied: PyYAML!=5.4.*,>=5.1 in /opt/conda/lib/python3.10/site-packages (from pytorch-lightning==1.2.9) (6.0.2)
Requirement already satisfied: tqdm>=4.41.0 in /opt/conda/lib/python3.10/site-packages (from pytorch-lightning==1.2.9) (4.66.4)
Requirement already satisfied: fsspec>=0.8.1 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]>=0.8.1->pytorch-lightning==1.2.9) (2024.6.1)
Requirement already satisfied: tensorboard!=2.5.0,>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from pytorch-lightning==1.2.9) (2.16.2)
Collecting torchmetrics==0.2.0 (from pytorch-lightning==1.2.9)
  Downloading torchmetrics-0.2.0-py3-none-any.whl.metadata (11 kB)
Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]>=0.8.1->pytorch-lightning==1.2.9) (3.9.5)
Requirement already satisfied: absl-py>=0.4 in /opt/conda/lib/python3.10/site-packages (from tensorboard!=2.5.0,>=2.2.0->pytorch-lightning==1.2.9) (1.4.0)
Requirement already satisfied: grpcio>=1.48.2 in /opt/conda/lib/python3.10/site-packages (from tensorboard!=2.5.0,>=2.2.0->pytorch-lightning==1.2.9) (1.62.2)
Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard!=2.5.0,>=2.2.0->pytorch-lightning==1.2.9) (3.6)
Requirement already satisfied: protobuf!=4.24.0,>=3.19.6 in /opt/conda/lib/python3.10/site-packages (from tensorboard!=2.5.0,>=2.2.0->pytorch-lightning==1.2.9) (3.20.3)
Requirement already satisfied: setuptools>=41.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard!=2.5.0,>=2.2.0->pytorch-lightning==1.2.9) (70.0.0)
Requirement already satisfied: six>1.9 in /opt/conda/lib/python3.10/site-packages (from tensorboard!=2.5.0,>=2.2.0->pytorch-lightning==1.2.9) (1.16.0)
Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard!=2.5.0,>=2.2.0->pytorch-lightning==1.2.9) (0.7.2)
Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard!=2.5.0,>=2.2.0->pytorch-lightning==1.2.9) (3.0.4)
Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->pytorch-lightning==1.2.9) (3.15.1)
Requirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->pytorch-lightning==1.2.9) (4.12.2)
Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->pytorch-lightning==1.2.9) (1.13.3)
Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->pytorch-lightning==1.2.9) (3.3)
Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->pytorch-lightning==1.2.9) (3.1.4)
Requirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=0.8.1->pytorch-lightning==1.2.9) (1.3.1)
Requirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=0.8.1->pytorch-lightning==1.2.9) (23.2.0)
Requirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=0.8.1->pytorch-lightning==1.2.9) (1.4.1)
Requirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=0.8.1->pytorch-lightning==1.2.9) (6.0.5)
Requirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=0.8.1->pytorch-lightning==1.2.9) (1.9.4)
Requirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=0.8.1->pytorch-lightning==1.2.9) (4.0.3)
Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard!=2.5.0,>=2.2.0->pytorch-lightning==1.2.9) (2.1.5)
Requirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.4->pytorch-lightning==1.2.9) (1.3.0)
Requirement already satisfied: idna>=2.0 in /opt/conda/lib/python3.10/site-packages (from yarl<2.0,>=1.0->aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=0.8.1->pytorch-lightning==1.2.9) (3.7)
Downloading pytorch_lightning-1.2.9-py3-none-any.whl (841 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 841.9/841.9 kB 15.7 MB/s eta 0:00:00a 0:00:01
Downloading torchmetrics-0.2.0-py3-none-any.whl (176 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 176.9/176.9 kB 16.0 MB/s eta 0:00:00
Installing collected packages: torchmetrics, pytorch-lightning
  Attempting uninstall: torchmetrics
    Found existing installation: torchmetrics 1.4.2
    Uninstalling torchmetrics-1.4.2:
      Successfully uninstalled torchmetrics-1.4.2
  Attempting uninstall: pytorch-lightning
    Found existing installation: pytorch-lightning 2.4.0
    Uninstalling pytorch-lightning-2.4.0:
      Successfully uninstalled pytorch-lightning-2.4.0
Successfully installed pytorch-lightning-1.2.9 torchmetrics-0.2.0
Requirement already satisfied: tabulate in /opt/conda/lib/python3.10/site-packages (0.9.0)
Collecting kornia==0.5.0
  Downloading kornia-0.5.0-py2.py3-none-any.whl.metadata (12 kB)
Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from kornia==0.5.0) (1.26.4)
Requirement already satisfied: torch>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from kornia==0.5.0) (2.4.0)
Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->kornia==0.5.0) (3.15.1)
Requirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->kornia==0.5.0) (4.12.2)
Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->kornia==0.5.0) (1.13.3)
Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->kornia==0.5.0) (3.3)
Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->kornia==0.5.0) (3.1.4)
Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.6.0->kornia==0.5.0) (2024.6.1)
Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.6.0->kornia==0.5.0) (2.1.5)
Requirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.6.0->kornia==0.5.0) (1.3.0)
Downloading kornia-0.5.0-py2.py3-none-any.whl (271 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 271.5/271.5 kB 5.7 MB/s eta 0:00:0000:01
Installing collected packages: kornia
  Attempting uninstall: kornia
    Found existing installation: kornia 0.7.3
    Uninstalling kornia-0.7.3:
      Successfully uninstalled kornia-0.7.3
Successfully installed kornia-0.5.0
Collecting webdataset
  Downloading webdataset-0.2.100-py3-none-any.whl.metadata (12 kB)
Collecting braceexpand (from webdataset)
  Downloading braceexpand-0.1.7-py2.py3-none-any.whl.metadata (3.0 kB)
Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from webdataset) (1.26.4)
Requirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from webdataset) (6.0.2)
Downloading webdataset-0.2.100-py3-none-any.whl (74 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 74.8/74.8 kB 2.9 MB/s eta 0:00:00
Downloading braceexpand-0.1.7-py2.py3-none-any.whl (5.9 kB)
Installing collected packages: braceexpand, webdataset
Successfully installed braceexpand-0.1.7 webdataset-0.2.100
Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (21.3)
Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging) (3.1.2)
Collecting scikit-learn==0.24.2
  Using cached scikit-learn-0.24.2.tar.gz (7.5 MB)
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
  Preparing metadata (pyproject.toml) ... error
  error: subprocess-exited-with-error
  
  × Preparing metadata (pyproject.toml) did not run successfully.
  │ exit code: 1
  ╰─> [1506 lines of output]
      <string>:17: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
      Partial import of sklearn during the build process.
      <string>:116: DeprecationWarning:
      
        `numpy.distutils` is deprecated since NumPy 1.23.0, as a result
        of the deprecation of `distutils` itself. It will be removed for
        Python >= 3.12. For older Python versions it will remain present.
        It is recommended to use `setuptools < 60.0` for those Python versions.
        For more details, see:
          https://numpy.org/devdocs/reference/distutils_status_migration.html
      
      
      INFO: C compiler: gcc -pthread -B /opt/conda/compiler_compat -Wno-unused-result -Wsign-compare -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/conda/include -fPIC -O2 -isystem /opt/conda/include -fPIC
      
      INFO: compile options: '-c'
      INFO: gcc: test_program.c
      INFO: gcc -pthread -B /opt/conda/compiler_compat objects/test_program.o -o test_program
      INFO: C compiler: gcc -pthread -B /opt/conda/compiler_compat -Wno-unused-result -Wsign-compare -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/conda/include -fPIC -O2 -isystem /opt/conda/include -fPIC
      
      INFO: compile options: '-c'
      extra options: '-fopenmp'
      INFO: gcc: test_program.c
      INFO: gcc -pthread -B /opt/conda/compiler_compat objects/test_program.o -o test_program -fopenmp
      Compiling sklearn/__check_build/_check_build.pyx because it changed.
      Compiling sklearn/preprocessing/_csr_polynomial_expansion.pyx because it changed.
      Compiling sklearn/cluster/_dbscan_inner.pyx because it changed.
      Compiling sklearn/cluster/_hierarchical_fast.pyx because it changed.
      Compiling sklearn/cluster/_k_means_fast.pyx because it changed.
      Compiling sklearn/cluster/_k_means_lloyd.pyx because it changed.
      Compiling sklearn/cluster/_k_means_elkan.pyx because it changed.
      Compiling sklearn/datasets/_svmlight_format_fast.pyx because it changed.
      Compiling sklearn/decomposition/_online_lda_fast.pyx because it changed.
      Compiling sklearn/decomposition/_cdnmf_fast.pyx because it changed.
      Compiling sklearn/ensemble/_gradient_boosting.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/_gradient_boosting.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/histogram.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/splitting.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/_binning.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/_loss.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/_bitset.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/common.pyx because it changed.
      Compiling sklearn/ensemble/_hist_gradient_boosting/utils.pyx because it changed.
      Compiling sklearn/feature_extraction/_hashing_fast.pyx because it changed.
      Compiling sklearn/manifold/_utils.pyx because it changed.
      Compiling sklearn/manifold/_barnes_hut_tsne.pyx because it changed.
      Compiling sklearn/metrics/cluster/_expected_mutual_info_fast.pyx because it changed.
      Compiling sklearn/metrics/_pairwise_fast.pyx because it changed.
      Compiling sklearn/neighbors/_ball_tree.pyx because it changed.
      Compiling sklearn/neighbors/_kd_tree.pyx because it changed.
      Compiling sklearn/neighbors/_dist_metrics.pyx because it changed.
      Compiling sklearn/neighbors/_typedefs.pyx because it changed.
      Compiling sklearn/neighbors/_quad_tree.pyx because it changed.
      Compiling sklearn/tree/_tree.pyx because it changed.
      Compiling sklearn/tree/_splitter.pyx because it changed.
      Compiling sklearn/tree/_criterion.pyx because it changed.
      Compiling sklearn/tree/_utils.pyx because it changed.
      Compiling sklearn/utils/sparsefuncs_fast.pyx because it changed.
      Compiling sklearn/utils/_cython_blas.pyx because it changed.
      Compiling sklearn/utils/arrayfuncs.pyx because it changed.
      Compiling sklearn/utils/murmurhash.pyx because it changed.
      Compiling sklearn/utils/graph_shortest_path.pyx because it changed.
      Compiling sklearn/utils/_fast_dict.pyx because it changed.
      Compiling sklearn/utils/_openmp_helpers.pyx because it changed.
      Compiling sklearn/utils/_seq_dataset.pyx because it changed.
      Compiling sklearn/utils/_weight_vector.pyx because it changed.
      Compiling sklearn/utils/_random.pyx because it changed.
      Compiling sklearn/utils/_logistic_sigmoid.pyx because it changed.
      Compiling sklearn/svm/_newrand.pyx because it changed.
      Compiling sklearn/svm/_libsvm.pyx because it changed.
      Compiling sklearn/svm/_liblinear.pyx because it changed.
      Compiling sklearn/svm/_libsvm_sparse.pyx because it changed.
      Compiling sklearn/linear_model/_cd_fast.pyx because it changed.
      Compiling sklearn/linear_model/_sgd_fast.pyx because it changed.
      Compiling sklearn/linear_model/_sag_fast.pyx because it changed.
      Compiling sklearn/_isotonic.pyx because it changed.
      warning: sklearn/cluster/_dbscan_inner.pyx:17:5: Only extern functions can throw C++ exceptions.
      warning: sklearn/neighbors/_dist_metrics.pxd:19:64: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:29:65: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:38:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:42:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:65:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:68:52: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:75:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:77:67: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:336:5: Exception check on '_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:574:5: Exception check on '_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_update_chunk_sparse' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:294:31: Exception check after calling '__pyx_fuse_0_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_0_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:294:31: Exception check after calling '__pyx_fuse_1_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:385:60: Exception check after calling '__pyx_fuse_0_euclidean_dense_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_euclidean_dense_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:396:57: Exception check after calling '__pyx_fuse_0_euclidean_dense_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_euclidean_dense_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:385:60: Exception check after calling '__pyx_fuse_1_euclidean_dense_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_euclidean_dense_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:396:57: Exception check after calling '__pyx_fuse_1_euclidean_dense_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_euclidean_dense_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:528:32: Exception check after calling '__pyx_fuse_0_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_0_update_chunk_sparse' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:528:32: Exception check after calling '__pyx_fuse_1_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_update_chunk_sparse' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:624:61: Exception check after calling '__pyx_fuse_0_euclidean_sparse_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_euclidean_sparse_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:636:58: Exception check after calling '__pyx_fuse_0_euclidean_sparse_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_euclidean_sparse_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:624:61: Exception check after calling '__pyx_fuse_1_euclidean_sparse_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_euclidean_sparse_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_elkan.pyx:636:58: Exception check after calling '__pyx_fuse_1_euclidean_sparse_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_euclidean_sparse_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/cluster/_k_means_fast.pyx:34:5: Exception check on '_euclidean_dense_dense' will always require the GIL to be acquired. Declare '_euclidean_dense_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/cluster/_k_means_fast.pyx:66:5: Exception check on '_euclidean_sparse_dense' will always require the GIL to be acquired. Declare '_euclidean_sparse_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:164:5: Exception check on '_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:361:5: Exception check on '_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_update_chunk_sparse' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:131:31: Exception check after calling '__pyx_fuse_0_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_0_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:131:31: Exception check after calling '__pyx_fuse_1_update_chunk_dense' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_update_chunk_dense' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_update_chunk_dense' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:201:9: Exception check after calling '__pyx_fuse_0_gemm' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_gemm' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_0_gemm' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:201:9: Exception check after calling '__pyx_fuse_1_gemm' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_gemm' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_gemm' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:327:32: Exception check after calling '__pyx_fuse_0_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_0_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_0_update_chunk_sparse' to allow an error code to be returned.
      performance hint: sklearn/cluster/_k_means_lloyd.pyx:327:32: Exception check after calling '__pyx_fuse_1_update_chunk_sparse' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_update_chunk_sparse' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_update_chunk_sparse' to allow an error code to be returned.
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_bitset.pyx:19:5: Exception check on 'init_bitset' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'init_bitset' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'init_bitset' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_bitset.pyx:27:5: Exception check on 'set_bitset' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'set_bitset' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'set_bitset' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_bitset.pxd:11:28: No exception value declared for 'in_bitset' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_bitset.pxd:13:40: No exception value declared for 'in_bitset_memoryview' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_bitset.pxd:16:42: No exception value declared for 'in_bitset_2d_memoryview' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_loss.pyx:187:5: Exception check on '_compute_softmax' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_compute_softmax' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_compute_softmax' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_loss.pyx:167:28: Exception check after calling '_compute_softmax' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_compute_softmax' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_compute_softmax' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_loss.pyx:178:28: Exception check after calling '_compute_softmax' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_compute_softmax' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_compute_softmax' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx:72:38: Exception check after calling 'in_bitset_2d_memoryview' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'in_bitset_2d_memoryview' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx:77:40: Exception check after calling 'in_bitset_2d_memoryview' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'in_bitset_2d_memoryview' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx:136:38: Exception check after calling 'in_bitset_2d_memoryview' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'in_bitset_2d_memoryview' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:252:6: Exception check on '_build_histogram_naive' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_naive' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_naive' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:276:6: Exception check on '_subtract_histograms' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_subtract_histograms' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_subtract_histograms' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:300:6: Exception check on '_build_histogram' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:347:6: Exception check on '_build_histogram_no_hessian' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_no_hessian' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_no_hessian' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:391:6: Exception check on '_build_histogram_root' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_root' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_root' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:444:6: Exception check on '_build_histogram_root_no_hessian' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_root_no_hessian' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_root_no_hessian' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:158:60: Exception check after calling '_compute_histogram_brute_single_feature' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_compute_histogram_brute_single_feature' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_compute_histogram_brute_single_feature' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:190:48: Exception check after calling '_build_histogram_root_no_hessian' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_root_no_hessian' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_root_no_hessian' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:194:37: Exception check after calling '_build_histogram_root' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_root' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_root' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:199:43: Exception check after calling '_build_histogram_no_hessian' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram_no_hessian' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram_no_hessian' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:203:32: Exception check after calling '_build_histogram' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_build_histogram' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_build_histogram' to allow an error code to be returned.
      performance hint: sklearn/ensemble/_hist_gradient_boosting/histogram.pyx:244:32: Exception check after calling '_subtract_histograms' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_subtract_histograms' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_subtract_histograms' to allow an error code to be returned.
      warning: sklearn/ensemble/_hist_gradient_boosting/splitting.pyx:19:0: The 'IF' statement is deprecated and will be removed in a future Cython version. Consider using runtime conditions or C macros instead. See https://github.com/cython/cython/issues/4310
      warning: sklearn/ensemble/_hist_gradient_boosting/splitting.pyx:309:12: The 'IF' statement is deprecated and will be removed in a future Cython version. Consider using runtime conditions or C macros instead. See https://github.com/cython/cython/issues/4310
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              if n_used_bins <= 1:
                  free(cat_infos)
                  return
      
              qsort(cat_infos, n_used_bins, sizeof(categorical_info),
                    compare_cat_infos)
                    ^
      ------------------------------------------------------------
      
      sklearn/ensemble/_hist_gradient_boosting/splitting.pyx:912:14: Cannot assign type 'int (const void *, const void *) except? -1 nogil' to 'int (*)(const void *, const void *) noexcept nogil'. Exception values are incompatible. Suggest adding 'noexcept' to the type of 'compare_cat_infos'.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/ensemble/_hist_gradient_boosting/splitting.pyx
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # Max value for our rand_r replacement (near the bottom).
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:18:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       np.int_t n_samples,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:19:33: 'int_t' is not a type identifier
      performance hint: sklearn/linear_model/_cd_fast.pyx:48:5: Exception check on 'fmax' will always require the GIL to be acquired. Declare 'fmax' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_cd_fast.pyx:54:5: Exception check on 'fsign' will always require the GIL to be acquired. Declare 'fsign' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_cd_fast.pyx:63:5: Exception check on 'abs_max' will always require the GIL to be acquired. Declare 'abs_max' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_cd_fast.pyx:75:5: Exception check on 'max' will always require the GIL to be acquired. Declare 'max' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_cd_fast.pyx:87:5: Exception check on 'diff_abs_max' will always require the GIL to be acquired. Declare 'diff_abs_max' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/linear_model/_cd_fast.pyx
      performance hint: sklearn/linear_model/_sag_fast.pyx:1202:5: Exception check on 'predict_sample64' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'predict_sample64' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'predict_sample64' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:1249:5: Exception check on 'predict_sample32' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'predict_sample32' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'predict_sample32' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:467:43: Exception check after calling 'random' will always require the GIL to be acquired. Declare 'random' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sag_fast.pyx:495:32: Exception check after calling 'predict_sample64' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'predict_sample64' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'predict_sample64' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:500:35: Exception check after calling 'dloss' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'dloss' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:503:44: Exception check after calling 'dloss' will always require the GIL to be acquired. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sag_fast.pyx:798:43: Exception check after calling 'random' will always require the GIL to be acquired. Declare 'random' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sag_fast.pyx:826:32: Exception check after calling 'predict_sample32' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'predict_sample32' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'predict_sample32' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:831:35: Exception check after calling 'dloss' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'dloss' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:834:44: Exception check after calling 'dloss' will always require the GIL to be acquired. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sag_fast.pyx:1337:24: Exception check after calling 'next' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'next' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'next' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:1341:28: Exception check after calling 'predict_sample64' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'predict_sample64' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'predict_sample64' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:1345:27: Exception check after calling 'dloss' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'dloss' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sag_fast.pyx:1348:39: Exception check after calling '_loss' will always require the GIL to be acquired. Declare '_loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:666:5: Exception check on 'l1penalty' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'l1penalty' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'l1penalty' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:514:31: Exception check after calling 'shuffle' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'shuffle' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'shuffle' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:516:28: Exception check after calling 'next' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'next' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'next' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:524:25: Exception check after calling 'dot' will always require the GIL to be acquired. Declare 'dot' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:531:40: Exception check after calling 'loss' will always require the GIL to be acquired. Declare 'loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:542:45: Exception check after calling 'loss' will always require the GIL to be acquired. Declare 'loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:545:38: Exception check after calling 'loss' will always require the GIL to be acquired. Declare 'loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:547:38: Exception check after calling 'dloss' will always require the GIL to be acquired. Declare 'dloss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:569:27: Exception check after calling 'scale' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'scale' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'scale' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:571:25: Exception check after calling 'add' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'add' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'add' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:580:33: Exception check after calling 'add_average' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'add_average' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'add_average' to allow an error code to be returned.
      performance hint: sklearn/linear_model/_sgd_fast.pyx:587:29: Exception check after calling 'l1penalty' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'l1penalty' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'l1penalty' to allow an error code to be returned.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/manifold/_barnes_hut_tsne.pyx:224:30: Exception check after calling 'summarize' will always require the GIL to be acquired. Declare 'summarize' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      warning: sklearn/neighbors/_binary_tree.pxi:595:66: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:603:49: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:665:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1215:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1224:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1805:78: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_ball_tree.pyx:109:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_ball_tree.pyx:125:82: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_ball_tree.pyx:136:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:19:64: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:29:65: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:38:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:42:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:65:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:68:52: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:75:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:77:67: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/neighbors/_binary_tree.pxi:539:5: Exception check on 'dual_swap' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'dual_swap' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'dual_swap' to allow an error code to be returned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              # determine number of levels in the tree, and from this
              # the number of nodes in the tree.  This results in leaf nodes
              # with numbers of points between leaf_size and 2 * leaf_size
              self.n_levels = int(
                  np.log2(fmax(1, (n_samples - 1) / self.leaf_size)) + 1)
              self.n_nodes = (2 ** self.n_levels) - 1
                                                  ^
      ------------------------------------------------------------
      
      sklearn/neighbors/_binary_tree.pxi:1079:44: Cannot assign type 'double' to 'ITYPE_t' (alias of 'long')
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/neighbors/_ball_tree.pyx
      warning: sklearn/neighbors/_dist_metrics.pxd:19:64: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:29:65: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:38:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:42:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:65:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:68:52: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:75:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:77:67: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:304:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:312:52: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:344:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:348:67: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:427:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:431:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:434:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:437:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:467:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:476:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:479:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:482:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:505:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:538:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:569:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:577:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:580:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:583:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:629:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:637:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:640:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:643:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:694:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:710:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:713:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:716:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:739:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:761:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:784:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:810:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:840:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:864:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:889:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:914:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:938:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:962:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:986:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:1020:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:1026:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:1029:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:1032:74: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pyx:1129:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:595:66: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:603:49: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:665:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1215:58: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1224:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_binary_tree.pxi:1805:78: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_kd_tree.pyx:91:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_kd_tree.pyx:152:82: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:19:64: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:29:65: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:38:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:42:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:65:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:68:52: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:75:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_dist_metrics.pxd:77:67: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/neighbors/_binary_tree.pxi:539:5: Exception check on 'dual_swap' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'dual_swap' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'dual_swap' to allow an error code to be returned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              # determine number of levels in the tree, and from this
              # the number of nodes in the tree.  This results in leaf nodes
              # with numbers of points between leaf_size and 2 * leaf_size
              self.n_levels = int(
                  np.log2(fmax(1, (n_samples - 1) / self.leaf_size)) + 1)
              self.n_nodes = (2 ** self.n_levels) - 1
                                                  ^
      ------------------------------------------------------------
      
      sklearn/neighbors/_binary_tree.pxi:1079:44: Cannot assign type 'double' to 'ITYPE_t' (alias of 'long')
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/neighbors/_kd_tree.pyx
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pyx:120:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pyx:309:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pyx:468:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pyx:563:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pyx:575:70: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          def __cinit__(self, int n_dimensions, int verbose):
              """Constructor."""
              # Parameters of the tree
              self.n_dimensions = n_dimensions
              self.verbose = verbose
              self.n_cells_per_cell = 2 ** self.n_dimensions
                                        ^
      ------------------------------------------------------------
      
      sklearn/neighbors/_quad_tree.pyx:60:34: Cannot assign type 'double' to 'SIZE_t' (alias of 'long')
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/neighbors/_quad_tree.pyx
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              free_problem(problem)
              free_parameter(param)
              raise ValueError(error_msg)
      
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_liblinear.pyx:55:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              free_parameter(param)
              raise ValueError(error_msg)
      
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
          blas_functions.axpy = _axpy[double]
                                     ^
      ------------------------------------------------------------
      
      sklearn/svm/_liblinear.pyx:56:31: Cannot assign type 'void (int, double, double *, int, double *, int) except * nogil' to 'axpy_func' (alias of 'void (*)(int, double, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              raise ValueError(error_msg)
      
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
          blas_functions.axpy = _axpy[double]
          blas_functions.scal = _scal[double]
                                     ^
      ------------------------------------------------------------
      
      sklearn/svm/_liblinear.pyx:57:31: Cannot assign type 'void (int, double, double *, int) except * nogil' to 'scal_func' (alias of 'void (*)(int, double, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
          blas_functions.axpy = _axpy[double]
          blas_functions.scal = _scal[double]
          blas_functions.nrm2 = _nrm2[double]
                                     ^
      ------------------------------------------------------------
      
      sklearn/svm/_liblinear.pyx:58:31: Cannot assign type 'double (int, double *, int) except * nogil' to 'nrm2_func' (alias of 'double (*)(int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/svm/_liblinear.pyx
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          if error_msg:
              # for SVR: epsilon is called p in libsvm
              error_repl = error_msg.decode('utf-8').replace("p < 0", "epsilon < 0")
              raise ValueError(error_repl)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm.pyx:194:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                             class_weight_label.data, class_weight.data)
          model = set_model(&param, <int> nSV.shape[0], SV.data, SV.shape,
                            support.data, support.shape, sv_coef.strides,
                            sv_coef.data, intercept.data, nSV.data, probA.data, probB.data)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm.pyx:358:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                            sv_coef.data, intercept.data, nSV.data,
                            probA.data, probB.data)
      
          cdef np.npy_intp n_class = get_nr(model)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm.pyx:464:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              n_class = 1
          else:
              n_class = get_nr(model)
              n_class = n_class * (n_class - 1) // 2
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm.pyx:570:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          if error_msg:
              raise ValueError(error_msg)
      
          cdef np.ndarray[np.float64_t, ndim=1, mode='c'] target
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm.pyx:714:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/svm/_libsvm.pyx
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          if error_msg:
              free_problem(problem)
              free_param(param)
              raise ValueError(error_msg)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm_sparse.pyx:153:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                                sv_coef.data, intercept.data,
                                nSV.data, probA.data, probB.data)
          #TODO: use check_model
          dec_values = np.empty(T_indptr.shape[0]-1)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm_sparse.pyx:284:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          #TODO: use check_model
          cdef np.npy_intp n_class = get_nr(model)
          cdef int rv
          dec_values = np.empty((T_indptr.shape[0]-1, n_class), dtype=np.float64)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm_sparse.pyx:343:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              n_class = get_nr(model)
              n_class = n_class * (n_class - 1) // 2
      
          dec_values = np.empty((T_indptr.shape[0] - 1, n_class), dtype=np.float64)
          cdef BlasFunctions blas_functions
          blas_functions.dot = _dot[double]
                                   ^
      ------------------------------------------------------------
      
      sklearn/svm/_libsvm_sparse.pyx:412:29: Cannot assign type 'double (int, double *, int, double *, int) except * nogil' to 'dot_func' (alias of 'double (*)(int, double *, int, double *, int) noexcept'). Exception values are incompatible. Suggest adding 'noexcept' to the type of the value being assigned.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/svm/_libsvm_sparse.pyx
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:61:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:86:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:93:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:100:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:282:76: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:348:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:375:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:402:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:744:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:788:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:799:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:810:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:1032:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:1082:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:1113:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pyx:1141:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/tree/_criterion.pyx:169:30: Exception check after calling 'children_impurity' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'children_impurity' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'children_impurity' to allow an error code to be returned.
      performance hint: sklearn/tree/_criterion.pyx:540:44: Exception check after calling 'log' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'log' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/tree/_criterion.pyx:574:49: Exception check after calling 'log' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'log' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/tree/_criterion.pyx:579:50: Exception check after calling 'log' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'log' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/tree/_criterion.pyx:1076:89: Exception check after calling 'get_median' will always require the GIL to be acquired. Declare 'get_median' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1104:74: Exception check after calling 'size' will always require the GIL to be acquired. Declare 'size' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1106:62: Exception check after calling 'pop' will always require the GIL to be acquired. Declare 'pop' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1132:75: Exception check after calling 'size' will always require the GIL to be acquired. Declare 'size' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1134:63: Exception check after calling 'pop' will always require the GIL to be acquired. Declare 'pop' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1172:70: Exception check after calling 'remove' will always require the GIL to be acquired. Declare 'remove' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1188:69: Exception check after calling 'remove' will always require the GIL to be acquired. Declare 'remove' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1252:74: Exception check after calling 'get_median' will always require the GIL to be acquired. Declare 'get_median' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1264:75: Exception check after calling 'get_median' will always require the GIL to be acquired. Declare 'get_median' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1365:32: Exception check after calling 'poisson_loss' will always require the GIL to be acquired. Declare 'poisson_loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1400:56: Exception check after calling 'log' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'log' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/tree/_criterion.pyx:1401:58: Exception check after calling 'log' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'log' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Declare any exception value explicitly for functions in pxd files.
      performance hint: sklearn/tree/_criterion.pyx:1422:44: Exception check after calling 'poisson_loss' will always require the GIL to be acquired. Declare 'poisson_loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_criterion.pyx:1425:45: Exception check after calling 'poisson_loss' will always require the GIL to be acquired. Declare 'poisson_loss' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:184:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:214:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:268:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:582:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:1100:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pyx:1330:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      performance hint: sklearn/tree/_splitter.pyx:46:5: Exception check on '_init_split' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_init_split' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_init_split' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:460:5: Exception check on 'sort' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'sort' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'sort' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:467:5: Exception check on 'swap' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'swap' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'swap' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:496:5: Exception check on 'introsort' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'introsort' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'introsort' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:529:5: Exception check on 'sift_down' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'sift_down' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'sift_down' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:552:5: Exception check on 'heapsort' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'heapsort' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'heapsort' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:944:5: Exception check on 'binary_search' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'binary_search' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'binary_search' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:969:5: Exception check on 'extract_nnz_index_to_samples' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'extract_nnz_index_to_samples' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'extract_nnz_index_to_samples' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:1009:5: Exception check on 'extract_nnz_binary_search' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'extract_nnz_binary_search' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'extract_nnz_binary_search' to allow an error code to be returned.
      performance hint: sklearn/tree/_splitter.pyx:1081:5: Exception check on 'sparse_swap' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'sparse_swap' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'sparse_swap' to allow an error code to be returned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          if not is_samples_sorted[0]:
              n_samples = end - start
              memcpy(sorted_samples + start, samples + start,
                     n_samples * sizeof(SIZE_t))
              qsort(sorted_samples + start, n_samples, sizeof(SIZE_t),
                    compare_SIZE_t)
                    ^
      ------------------------------------------------------------
      
      sklearn/tree/_splitter.pyx:1037:14: Cannot assign type 'int (const void *, const void *) except? -1 nogil' to 'int (*)(const void *, const void *) noexcept nogil'. Exception values are incompatible. Suggest adding 'noexcept' to the type of 'compare_SIZE_t'.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/tree/_splitter.pyx
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pyx:273:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pyx:421:76: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pyx:678:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pyx:690:70: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pyx:724:73: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
              # Initial capacity
              cdef int init_capacity
      
              if tree.max_depth <= 10:
                  init_capacity = (2 ** (tree.max_depth + 1)) - 1
                                                              ^
      ------------------------------------------------------------
      
      sklearn/tree/_tree.pyx:151:56: Cannot assign type 'double' to 'int'
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/tree/_tree.pyx
      warning: sklearn/tree/_utils.pxd:49:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:87:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:119:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:137:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:139:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:160:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pxd:161:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:61:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:62:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_tree.pxd:63:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:84:72: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_splitter.pxd:89:68: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:57:45: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:58:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:59:48: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_criterion.pxd:60:57: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:76:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:95:51: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:98:59: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:99:63: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/neighbors/_quad_tree.pxd:100:80: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:29:75: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:114:61: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:230:56: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:318:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:335:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:493:40: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      warning: sklearn/tree/_utils.pyx:507:71: The keyword 'nogil' should appear at the end of the function signature line. Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # Max value for our rand_r replacement (near the bottom).
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:18:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       np.int_t n_samples,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:19:33: 'int_t' is not a type identifier
      performance hint: sklearn/tree/_utils.pyx:29:5: Exception check on 'safe_realloc' will always require the GIL to be acquired. Declare 'safe_realloc' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/tree/_utils.pxd:55:20: No exception value declared for 'rand_int' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      performance hint: sklearn/tree/_utils.pxd:59:24: No exception value declared for 'rand_uniform' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      performance hint: sklearn/tree/_utils.pxd:63:15: No exception value declared for 'log' in pxd file.
      Users cimporting this function and calling it without the gil will always require an exception check.
      Suggest adding an explicit exception value.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/tree/_utils.pyx
      performance hint: sklearn/utils/_cython_blas.pyx:20:5: Exception check on '_dot' will always require the GIL to be acquired. Declare '_dot' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/utils/_cython_blas.pyx:33:5: Exception check on '_asum' will always require the GIL to be acquired. Declare '_asum' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/utils/_cython_blas.pyx:45:5: Exception check on '_axpy' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_axpy' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_axpy' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:58:5: Exception check on '_nrm2' will always require the GIL to be acquired. Declare '_nrm2' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
      performance hint: sklearn/utils/_cython_blas.pyx:70:5: Exception check on '_copy' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_copy' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_copy' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:82:5: Exception check on '_scal' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_scal' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_scal' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:94:5: Exception check on '_rotg' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_rotg' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_rotg' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:107:5: Exception check on '_rot' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_rot' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_rot' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:124:5: Exception check on '_gemv' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_gemv' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_gemv' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:153:5: Exception check on '_ger' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_ger' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_ger' to allow an error code to be returned.
      performance hint: sklearn/utils/_cython_blas.pyx:183:5: Exception check on '_gemm' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '_gemm' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '_gemm' to allow an error code to be returned.
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              dec(end)
              # Construct our arguments
              cdef pair[ITYPE_t, DTYPE_t] args
              args.first = key
              args.second = value
              self.my_map.insert(end, args)
                                 ^
      ------------------------------------------------------------
      
      sklearn/utils/_fast_dict.pyx:138:27: Cannot assign type 'iterator' to 'const_iterator'
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/utils/_fast_dict.pyx
      warning: sklearn/utils/_openmp_helpers.pyx:1:0: The 'IF' statement is deprecated and will be removed in a future Cython version. Consider using runtime conditions or C macros instead. See https://github.com/cython/cython/issues/4310
      warning: sklearn/utils/_openmp_helpers.pyx:44:4: The 'IF' statement is deprecated and will be removed in a future Cython version. Consider using runtime conditions or C macros instead. See https://github.com/cython/cython/issues/4310
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # Max value for our rand_r replacement (near the bottom).
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:18:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       np.int_t n_samples,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:19:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      from . import check_random_state
      
      cdef UINT32_t DEFAULT_SEED = 1
      
      
      cpdef _sample_without_replacement_check_input(np.int_t n_population,
                                                    ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:27:46: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
      cdef UINT32_t DEFAULT_SEED = 1
      
      
      cpdef _sample_without_replacement_check_input(np.int_t n_population,
                                                    np.int_t n_samples):
                                                    ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:28:46: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                               'n_samples, got n_samples > n_population (%s > %s)'
                               % (n_samples, n_population))
      
      
      cpdef _sample_without_replacement_with_tracking_selection(
              np.int_t n_population,
              ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:41:8: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                               % (n_samples, n_population))
      
      
      cpdef _sample_without_replacement_with_tracking_selection(
              np.int_t n_population,
              np.int_t n_samples,
              ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:42:8: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              out[i] = j
      
          return out
      
      
      cpdef _sample_without_replacement_with_pool(np.int_t n_population,
                                                  ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:105:44: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
          return out
      
      
      cpdef _sample_without_replacement_with_pool(np.int_t n_population,
                                                  np.int_t n_samples,
                                                  ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:106:44: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
          return out
      
      
      cpdef _sample_without_replacement_with_reservoir_sampling(
          np.int_t n_population,
          ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:165:4: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          return out
      
      
      cpdef _sample_without_replacement_with_reservoir_sampling(
          np.int_t n_population,
          np.int_t n_samples,
          ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:166:4: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
                  out[j] = i
      
          return out
      
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:223:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
      
          return out
      
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       np.int_t n_samples,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:224:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          out : ndarray of shape (n_samples,)
              The sampled subsets of integer.
          """
          _sample_without_replacement_check_input(n_population, n_samples)
      
          cdef np.int_t i
               ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:84:9: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
              The sampled subsets of integer.
          """
          _sample_without_replacement_check_input(n_population, n_samples)
      
          cdef np.int_t i
          cdef np.int_t j
               ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:85:9: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          """
          _sample_without_replacement_check_input(n_population, n_samples)
      
          cdef np.int_t i
          cdef np.int_t j
          cdef np.ndarray[np.int_t, ndim=1] out = np.empty((n_samples, ), dtype=int)
                             ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pyx:86:23: Invalid type.
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/utils/_random.pyx
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # Max value for our rand_r replacement (near the bottom).
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:18:33: 'int_t' is not a type identifier
      
      Error compiling Cython file:
      ------------------------------------------------------------
      ...
          # We don't use RAND_MAX because it's different across platforms and
          # particularly tiny on Windows/MSVC.
          RAND_R_MAX = 0x7FFFFFFF
      
      cpdef sample_without_replacement(np.int_t n_population,
                                       np.int_t n_samples,
                                       ^
      ------------------------------------------------------------
      
      sklearn/utils/_random.pxd:19:33: 'int_t' is not a type identifier
      Traceback (most recent call last):
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/utils/_seq_dataset.pyx
      performance hint: sklearn/utils/_weight_vector.pyx:169:29: Exception check after calling 'reset_wscale' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare 'reset_wscale' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on 'reset_wscale' to allow an error code to be returned.
      performance hint: sklearn/utils/_weight_vector.pyx:174:17: Exception check after calling '__pyx_fuse_1_axpy' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_axpy' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_axpy' to allow an error code to be returned.
      performance hint: sklearn/utils/_weight_vector.pyx:176:17: Exception check after calling '__pyx_fuse_1_scal' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_scal' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_scal' to allow an error code to be returned.
      performance hint: sklearn/utils/_weight_vector.pyx:180:13: Exception check after calling '__pyx_fuse_1_scal' will always require the GIL to be acquired.
      Possible solutions:
          1. Declare '__pyx_fuse_1_scal' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.
          2. Use an 'int' return type on '__pyx_fuse_1_scal' to allow an error code to be returned.
      multiprocessing.pool.RemoteTraceback:
      """
      Traceback (most recent call last):
        File "/opt/conda/lib/python3.10/multiprocessing/pool.py", line 125, in worker
          result = (True, func(*args, **kwds))
        File "/opt/conda/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
          return list(map(*args))
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1345, in cythonize_one_helper
          return cythonize_one(*m)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1321, in cythonize_one
          raise CompileError(None, pyx_file)
      Cython.Compiler.Errors.CompileError: sklearn/ensemble/_hist_gradient_boosting/splitting.pyx
      """
      
      The above exception was the direct cause of the following exception:
      
      Traceback (most recent call last):
        File "/opt/conda/lib/python3.10/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 353, in <module>
      [ 1/53] Cythonizing sklearn/__check_build/_check_build.pyx
      [ 2/53] Cythonizing sklearn/_isotonic.pyx
      [ 3/53] Cythonizing sklearn/cluster/_dbscan_inner.pyx
      [ 4/53] Cythonizing sklearn/cluster/_hierarchical_fast.pyx
      [ 5/53] Cythonizing sklearn/cluster/_k_means_elkan.pyx
      [ 6/53] Cythonizing sklearn/cluster/_k_means_fast.pyx
      [ 7/53] Cythonizing sklearn/cluster/_k_means_lloyd.pyx
      [ 8/53] Cythonizing sklearn/datasets/_svmlight_format_fast.pyx
      [ 9/53] Cythonizing sklearn/decomposition/_cdnmf_fast.pyx
      [10/53] Cythonizing sklearn/decomposition/_online_lda_fast.pyx
      [11/53] Cythonizing sklearn/ensemble/_gradient_boosting.pyx
      [12/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/_binning.pyx
      [13/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/_bitset.pyx
      [14/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/_gradient_boosting.pyx
      [15/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/_loss.pyx
      [16/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx
      [17/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/common.pyx
      [18/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/histogram.pyx
      [19/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/splitting.pyx
      [20/53] Cythonizing sklearn/ensemble/_hist_gradient_boosting/utils.pyx
      [21/53] Cythonizing sklearn/feature_extraction/_hashing_fast.pyx
      [22/53] Cythonizing sklearn/linear_model/_cd_fast.pyx
      [23/53] Cythonizing sklearn/linear_model/_sag_fast.pyx
      [24/53] Cythonizing sklearn/linear_model/_sgd_fast.pyx
      [25/53] Cythonizing sklearn/manifold/_barnes_hut_tsne.pyx
      [26/53] Cythonizing sklearn/manifold/_utils.pyx
      [27/53] Cythonizing sklearn/metrics/_pairwise_fast.pyx
      [28/53] Cythonizing sklearn/metrics/cluster/_expected_mutual_info_fast.pyx
      [29/53] Cythonizing sklearn/neighbors/_ball_tree.pyx
      [30/53] Cythonizing sklearn/neighbors/_dist_metrics.pyx
      [31/53] Cythonizing sklearn/neighbors/_kd_tree.pyx
      [32/53] Cythonizing sklearn/neighbors/_quad_tree.pyx
      [33/53] Cythonizing sklearn/neighbors/_typedefs.pyx
      [34/53] Cythonizing sklearn/preprocessing/_csr_polynomial_expansion.pyx
      [35/53] Cythonizing sklearn/svm/_liblinear.pyx
      [36/53] Cythonizing sklearn/svm/_libsvm.pyx
      [37/53] Cythonizing sklearn/svm/_libsvm_sparse.pyx
      [38/53] Cythonizing sklearn/svm/_newrand.pyx
      [39/53] Cythonizing sklearn/tree/_criterion.pyx
      [40/53] Cythonizing sklearn/tree/_splitter.pyx
      [41/53] Cythonizing sklearn/tree/_tree.pyx
      [42/53] Cythonizing sklearn/tree/_utils.pyx
      [43/53] Cythonizing sklearn/utils/_cython_blas.pyx
      [44/53] Cythonizing sklearn/utils/_fast_dict.pyx
      [45/53] Cythonizing sklearn/utils/_logistic_sigmoid.pyx
      [46/53] Cythonizing sklearn/utils/_openmp_helpers.pyx
      [47/53] Cythonizing sklearn/utils/_random.pyx
      [48/53] Cythonizing sklearn/utils/_seq_dataset.pyx
      [49/53] Cythonizing sklearn/utils/_weight_vector.pyx
      [50/53] Cythonizing sklearn/utils/arrayfuncs.pyx
      [51/53] Cythonizing sklearn/utils/graph_shortest_path.pyx
      [52/53] Cythonizing sklearn/utils/murmurhash.pyx
      [53/53] Cythonizing sklearn/utils/sparsefuncs_fast.pyx
          main()
        File "/opt/conda/lib/python3.10/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 335, in main
          json_out['return_val'] = hook(**hook_input['kwargs'])
        File "/opt/conda/lib/python3.10/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 149, in prepare_metadata_for_build_wheel
          return hook(metadata_directory, config_settings)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/setuptools/build_meta.py", line 377, in prepare_metadata_for_build_wheel
          self.run_setup()
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/setuptools/build_meta.py", line 522, in run_setup
          super().run_setup(setup_script=setup_script)
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/setuptools/build_meta.py", line 320, in run_setup
          exec(code, locals())
        File "<string>", line 301, in <module>
        File "<string>", line 297, in setup_package
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/numpy/distutils/core.py", line 135, in setup
          config = configuration()
        File "<string>", line 188, in configuration
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/numpy/distutils/misc_util.py", line 1041, in add_subpackage
          config_list = self.get_subpackage(subpackage_name, subpackage_path,
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/numpy/distutils/misc_util.py", line 1007, in get_subpackage
          config = self._get_configuration_from_setup_py(
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/numpy/distutils/misc_util.py", line 949, in _get_configuration_from_setup_py
          config = setup_module.configuration(*args)
        File "/tmp/pip-install-h0y91aio/scikit-learn_12c68059f35c494896e631872e2e1a54/sklearn/setup.py", line 83, in configuration
          cythonize_extensions(top_path, config)
        File "/tmp/pip-install-h0y91aio/scikit-learn_12c68059f35c494896e631872e2e1a54/sklearn/_build_utils/__init__.py", line 70, in cythonize_extensions
          config.ext_modules = cythonize(
        File "/tmp/pip-build-env-n4cutz_e/overlay/lib/python3.10/site-packages/Cython/Build/Dependencies.py", line 1145, in cythonize
          result.get(99999)  # seconds
        File "/opt/conda/lib/python3.10/multiprocessing/pool.py", line 774, in get
          raise self._value
      Cython.Compiler.Errors.CompileError: sklearn/ensemble/_hist_gradient_boosting/splitting.pyx
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: metadata-generation-failed

× Encountered error while generating package metadata.
╰─> See above for output.

note: This is an issue with the package mentioned above, not pip.
hint: See above for details.
Collecting wldhx.yadisk-direct
  Downloading wldhx.yadisk_direct-0.0.6-py3-none-any.whl.metadata (1.3 kB)
Requirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from wldhx.yadisk-direct) (2.32.3)
Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->wldhx.yadisk-direct) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->wldhx.yadisk-direct) (3.7)
Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->wldhx.yadisk-direct) (1.26.18)
Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->wldhx.yadisk-direct) (2024.8.30)
Downloading wldhx.yadisk_direct-0.0.6-py3-none-any.whl (4.5 kB)
Installing collected packages: wldhx.yadisk-direct
Successfully installed wldhx.yadisk-direct-0.0.6