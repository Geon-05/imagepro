Best model saved at epoch 3, batch 1850 with G loss: 7.6650238037109375 and D loss: 1.0452170372009277


CFG = {
    'EPOCHS':3,
    'LEARNING_RATE':3e-4,
    'BATCH_SIZE':16,
    'SEED':42
}


# 간단한 U-Net Generator
class UNetGenerator(nn.Module):
    def __init__(self, in_channels=3, out_channels=3):
        super(UNetGenerator, self).__init__()

        def down_block(in_feat, out_feat, normalize=True):
            layers = [nn.Conv2d(in_feat, out_feat, kernel_size=4, stride=2, padding=1)]
            if normalize:
                layers.append(nn.BatchNorm2d(out_feat))
            layers.append(nn.LeakyReLU(0.2, inplace=True))
            return nn.Sequential(*layers)

        def up_block(in_feat, out_feat):
            layers = [nn.ConvTranspose2d(in_feat, out_feat, kernel_size=4, stride=2, padding=1),
                      nn.ReLU(inplace=True)]
            return nn.Sequential(*layers)

        # 다운샘플링 단계를 줄이고 채널 수를 줄임
        self.down1 = down_block(in_channels, 32, normalize=False)
        self.down2 = down_block(32, 64)
        self.down3 = down_block(64, 128)
        self.down4 = down_block(128, 256, normalize=False)

        # 업샘플링 단계
        self.up1 = up_block(256, 128)
        self.up2 = up_block(256, 64)
        self.up3 = up_block(128, 32)
        self.up4 = nn.Sequential(
            nn.ConvTranspose2d(64, out_channels, kernel_size=4, stride=2, padding=1),
            nn.Tanh()
        )

    def forward(self, x):
        # 다운샘플링
        d1 = self.down1(x)
        d2 = self.down2(d1)
        d3 = self.down3(d2)
        d4 = self.down4(d3)

        # 업샘플링 (skip connection 포함)
        u1 = self.up1(d4)
        u2 = self.up2(torch.cat([u1, d3], 1))
        u3 = self.up3(torch.cat([u2, d2], 1))
        u4 = self.up4(torch.cat([u3, d1], 1))

        return u4

# 간단한 PatchGAN Discriminator
class PatchGANDiscriminator(nn.Module):
    def __init__(self, in_channels=3):
        super(PatchGANDiscriminator, self).__init__()

        def discriminator_block(in_filters, out_filters, normalization=True):
            layers = [nn.Conv2d(in_filters, out_filters, kernel_size=4, stride=2, padding=1)]
            if normalization:
                layers.append(nn.BatchNorm2d(out_filters))
            layers.append(nn.LeakyReLU(0.2, inplace=True))
            return nn.Sequential(*layers)

        # 디스크리미네이터의 레이어 수를 줄임
        self.model = nn.Sequential(
            discriminator_block(in_channels * 2, 32, normalization=False),
            discriminator_block(32, 64),
            discriminator_block(64, 128),
            nn.Conv2d(128, 1, kernel_size=4, padding=1)
        )

    def forward(self, img_A, img_B):
        img_input = torch.cat((img_A, img_B), 1)
        return self.model(img_input)
